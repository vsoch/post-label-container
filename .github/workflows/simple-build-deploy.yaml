name: Simple Build Containers
on: 
  workflow_dispatch: []
  pull_request: []
  push: 
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:

        # This is an example Dockerfile matrix - you could imagine extending it to different bases, etc.
        # You could also generate this dynamically and pipe in the json. See
        # https://github.com/buildsi/spack-containers/blob/11cbac76201e963006b2321e30b153f38687505f/.github/workflows/build-containers.yaml#L24

                     # base image   # dockerfile
        container: [["ubuntu:20.04", Dockerfile]]

    name: Build ${{ matrix.container[0] }} ${{ matrix.arch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Install crane
        run: go install github.com/google/go-containerregistry/cmd/crane@latest
      - name: Set Container Name
        env:
          base: ${{ matrix.container[0] }}
        run: |
          base=$(echo ${base/:/-})
          container="ghcr.io/vsoch/spack-simple-${base}:latest"
          echo "container=${container}" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Simple Docker Build
        run: |
           docker build -t ${{ env.container }} --build-arg base=${{ matrix.container[0] }} .

      - name: Label
        run: |
          docker run -i --rm ${{ env.container }} spack compiler list --flat > compilers.txt
          labels=$(echo $(tr '\r\n' ',' < compilers.txt))
          labels="org.spack.compilers=${labels}"          
          printf "Saving compiler labels ${labels}\n"         
          crane mutate --label ${labels}
          docker inspect -f {{.Config.Labels}} ${{ env.container }}

      - name: Deploy
        if: ${{ github.event_name != 'pull_request' }}
        run: |
           docker push ${{ env.container }}
